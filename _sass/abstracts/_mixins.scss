// Mixins are one step more than variables. For instance you can use mxins to put in flexbox and it's browser prefixes,
// or consistant patterns like borders for particular components. Like variables, if you find yourself writing code over and over
// make it into a mixin.




//Flexbox
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-direction($value: column) {
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  -moz-flex-direction: $value;
  flex-direction: $value;

}

@mixin align-items($value) {
  -webkit-align-items: $value;
  -ms-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;

}

@mixin justify-content($value) {
  -webkit-justify-content: $value;
  -ms-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;

}

@mixin order($value) {
  -webkit-box-ordinal-group: $value;
  -moz-box-ordinal-group: $value;
  -ms-flex-order: $value;
  -webkit-order: $value;
  order: $value;
}

@mixin align-self($value) {
  -webkit-align-self: $value;
  -ms-align-self: $value;
  -moz-align-self: $value;
  align-self: $value;

}

@mixin flex-wrap($value: wrap) {
  -webkit-flex-wrap: $value;
  -ms-flex-wrap: $value;
  -moz-flex-wrap: $value;
  flex-wrap: $value;
}

@mixin flex-grow($value: 0) {
  -webkit-flex-grow: $value;
  -ms-flex-grow: $value;
  -moz-flex-grow: $value;
  flex-grow: $value;
}

@mixin flex-shrink($value: 0) {
  -webkit-flex-shrink: $value;
  -ms-flex-shrink: $value;
  -moz-flex-shrink: $value;
  flex-shrink: $value;
}

// Borders

@mixin border($thickness:1px, $color: rgba(0,0,0,0.12) ) {
    border: $thickness solid $color;
}
@mixin border-radius($radius) {
    -moz-border-radius:$radius;
    -webkit-border-radius:$radius;
    border-radius:$radius;
}

// Media Queries
@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}


//Gradients

@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, top, bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}

// Shadows

// @mixin bigShadow {
// box-shadow: 0px 0px 4px 0px rgba(0,0,0,0.12), 0px 4px 4px 0px rgba(0,0,0,0.24);
// }
// @mixin smallShadow {
// box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.12), 0px 2px 2px 0px rgba(0,0,0,0.24);
// }
// @mixin linkShadow {
// box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.12), 0px 8px 8px 0px rgba(0,0,0,0.24);
// }

@mixin boxShadow($shadow) {
    -moz-box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
    -webkit-box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
    box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
}
