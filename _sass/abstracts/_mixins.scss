// Mixins are one step more than variables. For instance you can use mxins to put in flexbox and it's browser prefixes,
// or consistant patterns like borders for particular components. Like variables, if you find yourself writing code over and over
// make it into a mixin.

//Flexbox
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-direction($value: column) {
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  -moz-flex-direction: $value;
  flex-direction: $value;

}

@mixin align-items($value: center) {
  -webkit-align-items: $value;
  -ms-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;

}

@mixin justify-content($value: center) {
  -webkit-justify-content: $value;
  -ms-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;

}

@mixin order($value) {
  -webkit-box-ordinal-group: $value;
  -moz-box-ordinal-group: $value;
  -ms-flex-order: $value;
  -webkit-order: $value;
  order: $value;
}

@mixin align-self($value: center) {
  -webkit-align-self: $value;
  -ms-align-self: $value;
  -moz-align-self: $value;
  align-self: $value;

}

@mixin flex-wrap($value: wrap) {
  -webkit-flex-wrap: $value;
  -ms-flex-wrap: $value;
  -moz-flex-wrap: $value;
  flex-wrap: $value;
}

// Borders

@mixin border($thickness:1px, $color: $black) {
    border: $thickness solid $color;
}
@mixin border-radius($radius: $base-border-radius) {
    -moz-border-radius:$radius;
    -webkit-border-radius:$radius;
    border-radius:$radius;
}

// Media Queries
@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}

@mixin media-query-height($device) {
	@if $device == $maxIphone5 {
		@media screen and (max-height: $device) {
			@content;
		}
	} @if $device == $minIphone5 {
		@media screen and (min-height: $device) {
			@content;
		}
	} @else {
		@media screen and (min-height: $device) {
			@content;
		}
	}
}

//Gradients

@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, top, bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}

// Shadows
@mixin boxShadow($shadow) {
    -moz-box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
    -webkit-box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
    box-shadow: 0px 0px $shadow 0px rgba(0,0,0,0.12), 0px $shadow $shadow 0px rgba(0,0,0,0.24);
}


// 3D transform
@mixin trans3d($important: !important, $tx:0, $ty:0, $tz:0) {
  transform: translate3d($tx, $ty, $tz) $important;
  -ms-transform: translate3d($tx, $ty, $tz) $important;
  -webkit-transform: translate3d($tx, $ty, $tz) $important;
  -moz-transform: translate3d($tx, $ty, $tz) $important;
  -o-transform: translate3d($tx, $ty, $tz) $important;
}


@mixin disable-select {
	-webkit-touch-callout: none;

	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;

	user-drag: none;
	-webkit-user-drag: none;

	tap-highlight-color: $transparent;
	-webkit-tap-highlight-color: $transparent;

	touch-callout: none;
	-webkit-touch-callout: none;
}

@mixin enable-select {
	-webkit-touch-callout: initial;

	-webkit-user-select: initial;
	-khtml-user-select: initial;
	-moz-user-select: initial;
	-ms-user-select: initial;
	user-select: initial;

	user-drag: none;
	-webkit-user-drag: initial;

	tap-highlight-color: initial;
	-webkit-tap-highlight-color: initial;

	touch-callout: initial;
	-webkit-touch-callout: initial;
}


@mixin transform($x: 0, $y: 0, $z: 0, $duration: $animation-duration, $scale: 1) {
	-webkit-transform: translate3d($x, $y, $z) scale($scale);
	-moz-transform: translate3d($x, $y, $z) scale($scale);
	-o-transform: translate3d($x, $y, $z) scale($scale);
	-ms-transform: translate3d($x, $y, $z) scale($scale);
	transform: translate3d($x, $y, $z) scale($scale);

	-webkit-transition-duration: $duration;
	-moz-transition-duration: $duration;
	-o-transition-duration: $duration;
	-ms-transition-duration: $duration;
	transition-duration: $duration;

	-webkit-backface-visibility: hidden;
	-moz-backface-visibility: hidden;
	-o-backface-visibility: hidden;
	-ms-backface-visibility: hidden;
	backface-visibility: hidden;

	-webkit-box-shadow: none;
	-moz-box-shadow: none;
	-o-box-shadow: none;
	-ms-box-shadow: none;
	box-shadow: none;
}

@mixin transform-timing($timing: ease) {
	-webkit-transition-timing-function: $timing;
	-moz-transition-timing-function: $timing;
	-o-transition-timing-function: $timing;
	-ms-transition-timing-function: $timing;
	transition-timing-function: $timing;
}

@mixin filter($filter) {
	-webkit-filter: $filter;
	-moz-filter:$filter;
	-o-filter: $filter;
	-ms-filter: $filter;
	filter: $filter;
}


//ANIMATIONS

@-webkit-keyframes rotating /* Safari and Chrome */ {
	from {
		-ms-transform: rotate(0deg);
		-moz-transform: rotate(0deg);
		-webkit-transform: rotate(0deg);
		-o-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	to {
		-ms-transform: rotate(360deg);
		-moz-transform: rotate(360deg);
		-webkit-transform: rotate(360deg);
		-o-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}
@keyframes rotating {
	from {
		-ms-transform: rotate(0deg);
		-moz-transform: rotate(0deg);
		-webkit-transform: rotate(0deg);
		-o-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	to {
		-ms-transform: rotate(360deg);
		-moz-transform: rotate(360deg);
		-webkit-transform: rotate(360deg);
		-o-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

@-webkit-keyframes pulse {
	0% { -webkit-transform: scale(1); }
	50% { -webkit-transform: scale(0.9); }
	100% { -webkit-transform: scale(1); }
}
@keyframes pulse {
	0% { -webkit-transform: scale(1); }
	50% { -webkit-transform: scale(0.9); }
	100% { -webkit-transform: scale(1); }
}

